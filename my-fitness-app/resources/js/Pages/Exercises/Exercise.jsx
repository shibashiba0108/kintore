import React, { useState, useEffect } from "react";
import { Link, useForm, usePage } from "@inertiajs/react";
import AuthenticatedLayout from "@/Layouts/AuthenticatedLayout";

export default function Exercise() {
    const { auth, bodyParts = [], exercises = [] } = usePage().props;
    const user = auth ? auth.user : null;

    // „Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„É™„Çπ„Éà„ÇíÁÆ°ÁêÜ
    const [exerciseList, setExerciseList] = useState(exercises || []);
    const [searchQuery, setSearchQuery] = useState(""); // Ê§úÁ¥¢„ÇØ„Ç®„É™
    const [selectedPartId, setSelectedPartId] = useState(""); // ÈÅ∏Êäû„Åï„Çå„ÅüÈÉ®‰ΩçID

    // „ÇØ„Ç®„É™„Éë„É©„É°„Éº„Çø„Åã„ÇâÈÉ®‰ΩçID„ÇíÂèñÂæó
    useEffect(() => {
        const params = new URLSearchParams(window.location.search);
        const id = params.get("id");
        setSelectedPartId(id || "");
    }, []);

    // „Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫ËøΩÂä†„Éï„Ç©„Éº„É†„ÅÆ„Éá„Éº„Çø
    const { data, setData, post, processing, reset, errors } = useForm({
        excs_name: "", // Á®ÆÁõÆÂêç
        bdp_id: "", // ÈÉ®‰ΩçID
    });

    // „Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫ÂâäÈô§Áî®„ÅÆ„Éï„Ç©„Éº„É†„Éï„ÉÉ„ÇØ
    const { delete: destroy } = useForm();

    // „Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„ÅÆËøΩÂä†Âá¶ÁêÜ
    const submit = (e) => {
        e.preventDefault();

        post(route("exercises.store"), {
            onSuccess: (response) => {
                if (response.data && response.data.exercise) {
                    const newExercise = response.data.exercise;
                    setExerciseList((prevList) => [...prevList, newExercise]);
                }
                reset(); // „Éï„Ç©„Éº„É†„ÅÆ„É™„Çª„ÉÉ„Éà
                alert("„Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„ÅåÊ≠£Â∏∏„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„Åü„ÄÇ");
            },
            onError: (error) => {
                if (error.response) {
                    const errorMessage = error.response.data.message || "„Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ";
                    alert(`„Ç®„É©„Éº: ${errorMessage}`);
                    console.error("„Çµ„Éº„Éê„Éº„É¨„Çπ„Éù„É≥„Çπ„Ç®„É©„Éº:", error.response);
                } else {
                    alert("„Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„ÅÆËøΩÂä†‰∏≠„Å´‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ");
                    console.error("‰∏çÊòé„Å™„Ç®„É©„Éº:", error);
                }
            },
        });
    };

    // „Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫ÂâäÈô§Âá¶ÁêÜ
    const handleDelete = (exerciseId) => {
        if (confirm("„Åì„ÅÆ„Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü")) {
            destroy(route("exercises.destroy", exerciseId), {
                onSuccess: () => {
                    setExerciseList(
                        exerciseList.filter((exercise) => exercise.id !== exerciseId)
                    );
                    alert("„Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„ÅåÂâäÈô§„Åï„Çå„Åæ„Åó„Åü„ÄÇ");
                },
                onError: (error) => {
                    console.error("ÂâäÈô§„Ç®„É©„Éº:", error);
                },
            });
        }
    };

    // Ê§úÁ¥¢„Éï„Ç£„É´„Çø„ÉºÂá¶ÁêÜ
    const filteredExercises = exerciseList.filter((exercise) =>
        exercise.excs_name.toLowerCase().includes(searchQuery.toLowerCase()) &&
        (selectedPartId ? exercise.bdp_id.toString() === selectedPartId : true)
    );

    return (
        <AuthenticatedLayout
            user={user}
            header={
                <h2 className="font-semibold text-xl text-gray-800 leading-tight">
                    „Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„É™„Çπ„Éà
                </h2>
            }
        >
            <div className="container mx-auto py-8 px-4">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
                    {/* „Çµ„Ç§„Éâ„Éê„Éº */}
                    <div className="col-span-1">
                        <div className="bg-white p-6 shadow rounded-lg mb-8">
                            <h3 className="text-lg font-semibold mb-4 text-center">
                                ÈÉ®‰Ωç
                            </h3>
                            <ul className="space-y-2 text-center">
                                <li>
                                    {/* ÂÖ®„Å¶„ÅÆ„Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„ÇíË°®Á§∫„Åô„Çã„Åü„ÇÅ„Å´„ÄÅ„ÇØ„Ç®„É™„Éë„É©„É°„Éº„Çø„Çí„ÇØ„É™„Ç¢ */}
                                    <Link href="/exercises">ÂÖ®„Å¶</Link>
                                </li>
                                {bodyParts.length > 0 ? (
                                    bodyParts.map((part) => (
                                        <li key={part.id}>
                                            {/* ÈÉ®‰ΩçID„Çí„ÇØ„Ç®„É™„Éë„É©„É°„Éº„Çø„Å®„Åó„Å¶Ë®≠ÂÆö */}
                                            <Link href={`?id=${part.id}`} className="text-red-600 hover:text-red-800">
                                                {part.bdp_name}
                                            </Link>
                                        </li>
                                    ))
                                ) : (
                                    <li>ÈÉ®‰Ωç„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</li>
                                )}
                            </ul>
                        </div>

                        {/* „Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫ËøΩÂä†„Éï„Ç©„Éº„É† */}
                        <div className="bg-white p-6 shadow rounded-lg">
                            <h3 className="text-lg font-semibold mb-4 text-center">Á®ÆÁõÆ„ÇíËøΩÂä†</h3>
                            <form onSubmit={submit} className="space-y-4">
                                <div>
                                    <label className="block font-medium">Á®ÆÁõÆÂêç:</label>
                                    <input
                                        type="text"
                                        className="w-full p-2 border rounded"
                                        value={data.excs_name}
                                        onChange={(e) => setData("excs_name", e.target.value)}
                                    />
                                    {errors.excs_name && (
                                        <p className="text-red-600">{errors.excs_name}</p>
                                    )}
                                </div>
                                <div>
                                    <label className="block font-medium">ÈÉ®‰Ωç:</label>
                                    <select
                                        className="w-full p-2 border rounded"
                                        value={data.bdp_id}
                                        onChange={(e) => setData("bdp_id", e.target.value)}
                                    >
                                        <option value="">ÈÉ®‰Ωç„ÇíÈÅ∏Êäû</option>
                                        {bodyParts.map((part) => (
                                            <option key={part.id} value={part.id}>
                                                {part.bdp_name}
                                            </option>
                                        ))}
                                    </select>
                                    {errors.bdp_id && (
                                        <p className="text-red-600">{errors.bdp_id}</p>
                                    )}
                                </div>
                                <button
                                    type="submit"
                                    disabled={processing}
                                    className="w-full bg-red-500 text-white p-2 rounded hover:bg-red-600"
                                >
                                    ËøΩÂä†
                                </button>
                            </form>
                        </div>
                    </div>

                    {/* „Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„É™„Çπ„Éà */}
                    <div className="col-span-3">
                        <div className="mb-4">
                            {/* Ê§úÁ¥¢ÂÖ•ÂäõÊ¨Ñ */}
                            <input
                                type="text"
                                className="w-full p-2 border rounded"
                                placeholder="Á®ÆÁõÆÂêç„ÇíÊ§úÁ¥¢..."
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                            />
                        </div>

                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                            {filteredExercises.length > 0 ? (
                                filteredExercises.map((exercise) =>
                                    exercise && exercise.id ? (
                                        <div
                                            key={exercise.id}
                                            className="bg-white p-4 shadow rounded-lg text-center relative"
                                        >
                                            <Link
                                                href={route("exercises.show", exercise.id)}
                                                className="block"
                                            >
                                                <p className="font-semibold text-lg">{exercise.excs_name}</p>
                                                <p className="text-gray-600">Ë®òÈå≤</p>
                                            </Link>
                                            <button
                                                className="absolute top-2 right-2 text-red-500 hover:text-red-700"
                                                onClick={() => handleDelete(exercise.id)}
                                            >
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                    ) : null
                                )
                            ) : (
                                <p className="text-center col-span-3">Ë©≤ÂΩì„Åô„Çã„Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </AuthenticatedLayout>
    );
}